from __future__ import annotations
from pydantic import BaseModel, Field, model_validator, ConfigDict, field_validator
from typing import List, Optional, Annotated, Dict, ForwardRef
import cfscrape
from pathlib import Path
import csv
from nameparser import HumanName
from ..funcs import result_funcs as funcs
import hashlib

ENDORSEMENT_FILE = None


def read_endorsements(file_path: Path = ENDORSEMENT_FILE) -> list:
    # Read first row is header keys, each row after is values
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        headers = next(reader)
        return [dict(zip(headers, row)) for row in reader]


class ResultVersionNumber(BaseModel):
    id: int = Field(validation_alias='___versionNo')
    election_date: str = Field(validation_alias='elecDate')


class ElectionResultValidator(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
        str_strip_whitespace=True,
        str_to_upper=True
    )


class CandidateEndorsements(ElectionResultValidator):
    id: Optional[int] = None
    candidate_office_id: Optional[int] = None
    district: Annotated[
        str,
        Field(
            alias='District Type',
            description="Type of district"
        )
    ]
    district_number: Annotated[
        int,
        Field(
            alias='District Number',
            description="District number"
        )
    ]
    paxton: Annotated[
        Optional[bool],
        Field(
            alias='Paxton Endorsed',
            description="Endorsed by Texas Attorney General Ken Paxton"
        )
    ] = None
    candidate_first_name: Annotated[
        str,
        Field(
            alias='Candidate First Name',
            description="First name of candidate"
        )
    ]
    candidate_last_name: Annotated[
        str,
        Field(
            alias='Candidate Last Name',
            description="Last name of candidate"
        )
    ]
    abbott: Annotated[
        Optional[bool],
        Field(
            alias='Abbott Endorsed',
            description="Endorsed by Texas Governor Greg Abbott"
        )
    ] = None
    perry: Annotated[
        Optional[bool],
        Field(
            alias='Rick Perry Endorsed',
            description="Endorsed by former Texas Governor Rick Perry"
        )
    ] = None
    miller: Annotated[
        Optional[bool],
        Field(
            alias='Sid Miller Endorsed',
            description="Endorsed by Texas Agriculture Commissioner Sid Miller"
        )
    ] = None
    patrick: Annotated[
        Optional[bool],
        Field(
            alias='Dan Patrick Endorsed',
            description="Endorsed by Texas Lieutenant Governor Dan Patrick"
        )
    ] = None

    # vote_percent: Optional[float] = None
    # win_or_made_runoff: Optional[bool] = None

    @model_validator(mode='before')
    def strip_blank_strings(cls, values):
        for k, v in values.items():
            if v == "":
                values[k] = None
        return values

    @model_validator(mode='after')
    def generate_endorsement_id(self):
        # create a string representation of the model
        _endorsee_vars = [self.candidate_first_name, self.candidate_last_name, self.district, self.district_number]
        model_string = str("".join([str(var).strip() for var in _endorsee_vars]))

        # hash the string
        endorsement_id = hashlib.sha256(model_string.encode()).hexdigest()

        # add the consistent hash to the model
        self.id = int(endorsement_id, 16) % (10 ** 8)

        return self


ENDORSEMENT_DICT = read_endorsements()
ENDORSEMENTS = [CandidateEndorsements(**endorsement) for endorsement in ENDORSEMENT_DICT]


class Candidate(ElectionResultValidator):
    id: int
    full_name: str = Field(validation_alias='N')
    first_name: str
    last_name: str
    incumbent: Optional[bool]
    party: str = Field(validation_alias='P')
    early_votes: int = Field(validation_alias='EV')
    total_votes: int = Field(validation_alias='V')
    percent: float = Field(validation_alias='PE')
    color: str = Field(validation_alias='C')
    ballot_order: Annotated[Optional[int], Field(validation_alias='O')] = None
    endorsements: Optional[CandidateEndorsements] = None

    _parse_name = model_validator(mode='before')(funcs.parse_candidate_name)

    @model_validator(mode='before')
    def set_incumbent(cls, values):
        if "(I)" in values['N']:
            values['incumbent'] = True
        else:
            values['incumbent'] = False
        return values

    @model_validator(mode='before')
    def parse_candidate_name(cls, values):
        name = HumanName(values['N'])
        values['first_name'] = name.first
        values['last_name'] = name.last
        return values

    @field_validator('party')
    def validate_party(cls, value):
        if value == 'REP':
            return 'Republican'
        elif value == 'DEM':
            return 'Democrat'
        elif value == 'LIB':
            return 'Libertarian'
        elif value == 'GRE':
            return 'Green'
        elif value == 'IND':
            return 'Independent'
        elif value == 'W':
            return 'Write-In'
        else:
            return value

    @model_validator(mode='after')
    def add_endorsement(self):
        # assuming endorsements is a list of all endorsements
        for endorsement in ENDORSEMENTS:
            if (self.first_name == endorsement.candidate_first_name and
                    self.last_name == endorsement.candidate_last_name):
                endorsement.id = self.id
                self.endorsements = endorsement
                break
        return self


class Race(ElectionResultValidator):
    id: int = Field(validation_alias='OID')
    office: str = Field(validation_alias='ON')
    office_type: Optional[str] = None
    office_district: Optional[str] = None
    total_votes: int = Field(validation_alias='T')
    candidates: Dict[str, Candidate] = Field(validation_alias='C')
    ballot_order: int = Field(validation_alias='O')
    precincts_reporting: int = Field(validation_alias='PR')
    registered_voters: int = Field(validation_alias='OTRV')
    total_precincts: int = Field(validation_alias='TPR')

    _set_office_type = model_validator(mode='before')(funcs.set_office_type)
    _set_district_number = model_validator(mode='before')(funcs.set_district_number)


class Summary(ElectionResultValidator):
    precincts_reporting: int = Field(validation_alias='PRR')
    total_precincts: int = Field(validation_alias='PRP')
    percent_reporting: float = Field(validation_alias='P')
    registered_voters: int = Field(validation_alias='RV')
    voted_counted: int = Field(validation_alias='VC')
    turnout_percent: float = Field(validation_alias='VT')
    poll_loc: int = Field(validation_alias='NPL')
    poll_loc_reporting: int = Field(validation_alias='PLR')
    poll_loc_percent: float = Field(validation_alias='PLP')


class County(ElectionResultValidator):
    name: str = Field(validation_alias='N')
    registered_voters: int = Field(validation_alias='TV')
    color: str = Field(validation_alias='C')
    races: Dict[str, Race] = Field(validation_alias='Races')
    summary: Summary = Field(validation_alias='Summary')


class StatewideCandidateSummary(ElectionResultValidator):
    name: str = Field(validation_alias='N')
    first_name: str
    last_name: str
    party: str = Field(validation_alias='P')
    color: str = Field(validation_alias='C')
    total_votes: int = Field(validation_alias='T')
    ballot_order: int = Field(validation_alias='O')
    endorsement_id: Optional[int] = None
    endorsements: Optional[CandidateEndorsements] = None

    _parse_name = model_validator(mode='before')(funcs.parse_candidate_name)

    @model_validator(mode='after')
    def add_endorsement(self):
        # assuming endorsements is a list of all endorsements
        for endorsement in ENDORSEMENTS:
            if (self.first_name == endorsement.candidate_first_name and
                    self.last_name == endorsement.candidate_last_name):
                self.endorsement_id = endorsement.id
                self.endorsements = endorsement
                break
        return self


class StatewideOfficeSummary(BaseModel):
    office: int = Field(validation_alias='OID')
    name: str = Field(validation_alias='ON')
    candidates: List[StatewideCandidateSummary] = Field(validation_alias='C')